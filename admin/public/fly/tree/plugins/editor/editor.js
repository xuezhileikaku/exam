fly.mini.ItemEditor = function (_) { var $ = function ($) { _.extend(this, $) }; _.extend($.prototype, { join: function (_) { var A = this, $ = _.onRender; this.owner = _; _.onRender = function () { A.bindEvents(); $ && $.apply(_, arguments) } }, startEvents: { textDom: "dblclick" }, onBeforeStart: null, onStart: null, onBeforeEnd: null, onEnd: null, editedCss: null, blurByEnter: true, changedCss: "f-m-item-editor-changed", editCss: "f-m-item-editable", endByNextStart: true, endOnBlur: true, bindEvents: function () { var $ = this; if (this.owner._editor_eventBinded) return; this.owner._editor_eventBinded = true; if (this.blurByEnter) _.attachEvent($.owner.root.wrap, "keyup", function (_, A) { if ($.lastEditItem && A.keyCode == 13 && !A.ctrlKey) $.endEdit($.lastEditItem) }); _.each(this.startEvents, function (B, A) { _.attachEvent($.owner.root.wrap, B, function (D, F) { var G = F.target || F.srcElement, C = _.eachParent(G, function ($) { return !$.itemId }, 10, "parentNode", true); if (C) { var E = $.owner.itemMap[C.itemId], H = E[A], B = _.eachParent(G, function ($) { return $ != H }, 10, "parentNode", true); if (B) $.startEdit(E) } }) }) }, endEdit: function (A) { if (!A || !A.textDom) return; if (this.onBeforeEnd && this.onBeforeEnd(A) == false) return false; _.removeCss(A.panel, this.editCss); var $ = A.editorInput; if ($) { $.parentNode.removeChild($); $.onblur = $.onchange = null; A.text = $.value; A.editorInput = null } A.setText(A.text); A.editing = false; A.changed = A._oldText != A.text; this.changedCss && _[A.changed ? "addCss" : "removeCss"](A.panel, this.changedCss); this.onEnd && this.onEnd(A) }, startEdit: function ($) { if (!$ || !$.textDom) return; var A = this; if (!$.editing) { if (this.onBeforeStart && this.onBeforeStart($) == false) return false; this.editedCss && _.addCss($.panel, this.editedCss); $.edited = true; if ($._oldText == null) $._oldText = $.text; if (this.endByNextStart && this.lastEditItem && this.lastEditItem != $) this.endEdit(this.lastEditItem); _.addCss($.panel, this.editCss); $.textDom.innerHTML = '<input class=f-m-item-editor-input style="height:' + ($.textDom.clientHeight - 1) + 'px" />'; $.editorInput = $.textDom.children[0]; $.editorInput.onblur = function () { $.text = this.value; if (A.endOnBlur) A.endEdit($) }; $.editorInput.onchange = function () { $.text = this.value }; $.editorInput.value = $.text; $.editorInput.focus(); $.editorInput.select() } this.lastEditItem = $; $.editing = true; this.onStart && this.onStart($) }, getEditedItems: function ($) { return ($ || this.owner.root).queryItems("edited", true) }, getChangedItems: function ($) { return ($ || this.owner.root).queryItems("changed", true) } }); return $ } (fly.mini)